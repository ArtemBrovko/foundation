Ext.define('{{ class_name }}', {
    extend: 'Ext.grid.Panel',

    requires: [
        '{{ store_class_name }}'
    ],

    // l10n
    newRecordBtnText: 'Create new item',
    editBtnText: 'Edit',
    deleteBtnText: 'Delete',
{% for column in columns %}
    {{ column.localization_token }}: '{{ column.text }}',
{% endfor %}

    // override
    constructor: function(config) {
        var defaults = {
            ui: 'rounded',
            boxShadow: true,
            columns: [
{% for column in columns %}{# forColumns #}
                {
{% for key, value in column.definition %}
                    {{ key }}: '{{ value }}',
{% endfor %}
                    text: {% if column.definition.text %}'{{ column.definition.text }}'{% else %}this.{{ column.localization_token }}{% endif %}

                },
{% endfor %}{# /forColumns #}
            ],
            store: Ext.create('{{ store_class_name }}'),
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            itemId: 'newRecordBtn',
                            text: this.newRecordBtnText
                        },
                        {
                            itemId: 'editRecordBtn',
                            text: this.editBtnText
                        },
                        {
                            itemId: 'deleteRecordBtn',
                            text: this.deleteBtnText
                        }
                    ]
                }
            ]
        };
        this.config = Ext.apply(defaults, config);
        this.callParent([this.config]);

        this.addEvents(
            /**
            * @event newrecord
            * @param { {{ class_name }} } me
            */
            'newrecord',
            /**
            * @event previewrecord
            * @param { {{ class_name }} } me
            * @param {Object} params
            */
            'previewrecord',
            /**
            * @event deleterecord
            * @param { {{ class_name }} } me
            * @param {Object} params
            */
            'deleterecord',
            /**
            * @event editrecord
            * @param { {{ class_name }} } me
            * @param {Object} params
            */
            'editrecord'
        );

        this.assignListeners();
    },

    // private
    getSelectedRecord: function() {
        return this.getSelectionModel().getSelection()[0];
    },

    // private
    assignListeners: function() {
        var me = this;

        this.down('#newRecordBtn').on('click', function() {
            me.fireEvent('handleaction', me, 'newrecord');
        });

        this.down('#editRecordBtn').on('click', function() {
            me.fireEvent('handleaction', me, 'editrecord', { id: me.getSelectedRecord().get('id') });
        });

        this.down('#deleteRecordBtn').on('click', function() {
            me.fireEvent('handleaction', me, 'deleterecord', { id: me.getSelectedRecord().get('id') });
        });

        this.on('itemdblclick', function(sm, record) {
            me.fireEvent('handleaction', me, 'previewrecord', { id : record.get('id') });
        });
    }
});